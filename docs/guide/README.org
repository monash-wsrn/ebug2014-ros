#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Ahmet's Robots
#+DATE: <2017-09-06 mer>
#+AUTHOR: Nicola Roberto Zema
#+EMAIL: nicola.zema@unirc.it
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.1 (Org mode 9.0.10)
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
# #+DATE: \today

# #+begin_src css
# .sponsors .figure {
#     display: inline;
# }

# .sponsors .figure p {
#     display: inline;
# }

# .sponsors .figure img {
#     vertical-align: middle;
# }
# #+end_src

# If you simply want a vertical list of images, you can simply override
# the setting for .figure p:

# #+begin_src css
# .sponsors .figure p {
#     text-align: left;
# }

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/suse_todo.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="css/aligner.css" /> 
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.1 (<a href="http://orgmode.org">Org</a> mode 9.0.10)
#+LATEX_HEADER:


# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.

#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
# #+LaTeX_CLASS: beamer

# #+LaTeX_CLASS_OPTIONS: [bigger]
# #+LaTeX_CLASS_OPTIONS: [c]
# #+LATEX_HEADER: \usepackage{tikz}

# # Beamer supports alternate themes.  Choose your favourite 
# # #+BEAMER_THEME: Frankfurt
# # #+BEAMER_COLOR_THEME: crane
# #+BEAMER_THEME: bjeldbak
# # #+BEAMER_THEME: Amsterdam
# # #+BEAMER_THEME: Frankfurt
# # #+BEAMER_THEME: PraterStreet
# # #+BEAMER_COLOR_THEME: beaver

# # #+BEAMER_OUTER_THEME: smoothbar
# # #+BEAMER_INNER_THEME: circles
# # #+BEAMER_COLOR_THEME: wolverine

# # #+BEAMER_THEME: s4ndm4n

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

* =ebug_swarm_control=

** Instructions

   Just drop the =ebug_swarm_control= folder into
   =/home/<username>/catkin_ws/src= and issue a ~catkin_make~ as per
   manuals/tutorials.

   I have made also a launch file.

   Jeez!


   #+CAPTION: Ahmet's New Node Structure
   #+ATTR_HTML: style="display:inline;margin:10px;"
   #+LABEL: fig:newnodestructure
   [[file:material/newnodes.png]]

** Neverending Story
   #+CAPTION: New Ahmet's Delirium
   #+ATTR_LaTeX: scale=0.75
   #+ATTR_HTML: :width 100%
   #+LABEL: fig:newstructure
   [[file:material/updatedSchemacropped.png]]
   
   Please reference the schema of Figure [[fig:newstructure]].

   Main Objective: *move Erwyn's Code to ROS system*

*** Target Node
     - Localization Node :: Link Between Blobs and Poses

*** General Directive
    - Asynchronous Operations
      - Read from BLOBS
      - Write to POSES
    - Callback Operation
      - Upon Reception -> Activate Erwyn's Code -> Publish the results

    Blobs and Poses are ROS Topics;

      

*** General Description

#+BEGIN_QUOTE
one problem is waiting: integration of Erwin's code into the ROS
framework you have created. Erwin has sent his C++ code. It reads
the information sent by the blob camera and spits out the following
tuples: (=id_of_ebug,x_loc,y_loc,orientation=) for each eBug it
finds.

-- The Old Man
#+END_QUOTE

    

*** Involved Data
    For each FRAME:

**** Basic Data
     :PROPERTIES:
     :CUSTOM_ID: sec-basic_data
     :END:
     Timestamp + data about detected robots
     | General timestamp | detected robot Array |
     
***** Detected Robot Array
<<diocane>>
      | Robot ID | x-pos | y-pos | orientation |

**** Extended Data
     :PROPERTIES:
     :CUSTOM_ID: sec-extended_data
     :END:      
     |Frame ID | Camera Data | Size |[[Basic Data][Basic Data]] |

     - Size :: Singleton -> put an ~fuint_32~

***** Camera Data
      | blob-id | x-pos | y-pos | colour | radius |

*** Ways of calling the program
     
     1. With =-v=
	* Prints out [[Extended Data][Extended Data]]
     2. Without =-v= 
	* Prints out [[Basic Data][Basic Data]]

# * Dioscemo
#   [[#sec-extended_data]]
** First Things First

*** Refactor code

**** Steps Taken
     - eliminated function declaration in main.cpp
